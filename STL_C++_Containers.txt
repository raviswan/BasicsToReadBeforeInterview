C++ STL CONTAINERS


https://github.com/gibsjose/cpp-cheat-sheet/blob/master/Data%20Structures%20and%20Algorithms.md

==Using random numbers====
srand(time(NULL)); // call only once preferably at init
rand()% 100 // 0-99
rand()%100 + 1 ;// 1-100


================Stack==================
stack<int> s;
s.push() or s.emplace()
s.pop();
int a = s.top();




================Queue==================
queue<int> q;
q.push() or q.emplace()
q.pop();
int a = q.front();
queue<int> emptyQ;
std::swap(q,emptyQ);  //clearing a queue or any container



===============Dequeue==================
dequeue<int> q;
dq.push_front() or dq.push_back();
dq.pop_front() or dq.pop_back();
dq.front() or dq.back()



===============String==================

// ---- stringstream examples -----
ostringstream oss;
istringstream iss("example");
iss.str("new one");
cout<<iss.str()<<endl;
ostringstream oss;
oss<<25<<"ram"<<'+';
string ex=oss.str();
iss.str(ex);
iss>>i>>name>>c;
getline(sstrm,s, ',')    - will read a line from a string stream seperated by ',' and store the value one at a time in s
					So always call it in a loop to get values repeatedly.
getline(cin,str) -    will read everything upto and including the next EOL aand store the result (without EOL) in str.

s.find("string", pos = 0) - returns pos. else check for string::npos
s.find('c',pos = 0)
reverse(s.begin() + 3, s.end() -4);
sort(s.begin(), s.end());

http://math.hws.edu/eck/cs225/s03/files_and_strings.html
https://stackoverflow.com/questions/20594520/what-exactly-does-stringstream-do/20594678

============unordered_map============
unordered_map<int,int> hMap;
hMap[key]=value;
hMap.count(key) // to check whether the key exists . Returns 0 if it doesnt exist.
hMap.erase(key) / hMap.erase(it)


============unordered_set============
unordered_set<int> dict;  			//This is just hash map, except that key and value are the same.
unordered_set<int> dict(v.begin(),v.end()) 	//Converting vector into a hash set.
dict.find(elem) != dict.end().    		//finding element in the set
dict.emplace(elem) or dict.insert(elem)		//elem inserted if not present 		         
dict.erase(key) /dict.erase(it)				//elem erased if found



============unordered_multimap============    //used when same key has multiple values
unordered_multimap<string,string> hMap;
hMap.emplace(key, value)			//No [] operator for multimap.
hMap.erase(key)					//Will erase all the values associated with key
auto range=matchingMap.equal_range(key);	//returns an iterator pair. For finding all values for a given key
for(auto it=range.first;it!=range.second;++it){
	it->first;
	it->second
	

================
	HEAP
================
- Heaps are stored internally as arrays. 2*i+1 and 2*i+2 to access children
- Think of heap as BST too	
-max heap by default  
vector<int> v;
make_heap(v.begin(),v.end()).  // make a heap
v.push_back(elem); push_heap(v.begin(),v.end());   ///pushing element to heap
pop_heap(v.begin(),v.end()); v1.pop_back()        ///popping from a heap
v1.front() // max of a heap

make_heap(v.begin(),v.end(),greater<int>()); //min heap


=============
Priority Queue
============
// uses heap underlying. By default, max queue.

- For C++, its max heap by default. The way to think of it is:
	 priority_queue<int> pq;
	 In other words, 
	 priority_queue<dataType, container-for-Datatype, Comparator> pq;
	 For int data type,
	 priority_queue<int, vector<int>, std::less<int>> pq;
	 
Please note usually for Sorting, std:less<int> results in ascending order. For priority queue, topmost element is highest. This is likely because internally, the priority queue elements are stored in vector of some sort with smallest element at first index and biggest element at last index. And top() would return from back, as pop_back() is efficient for vector. 

- priority_queue<int,vector<int>,greater<int>> pq // min PQ

typedef pair<int, int> pii;
priority_queue<pii> pq ; // max PQ of pairs, ordered by first element.
priority_queue< pii, vector<pii>, greater<pii> > pq; // min PQ of pairs ordered by first element

struct CustomCompare {
   bool operator(){const pii& lhs, const pii& rhs){
   	return lhs.first > rhs.first; // for min heap ordered by first element
   }
 }
 
 struct CustomCompare {
	bool operator()(const pii& lhs, const pii& rhs) {
	    if(lhs.first==rhs.first)
		return lhs.second > rhs.second;  // for max heap ordered by first element, but when elements are equal, ordered by smaller of the second index.
	    return lhs.first < rhs.first; 
	}
}
priority_queue< pii, vector<pii>, CustomCompare > pq;

pq.push();
pq.pop();
pq.top();
pq.size();


===============vector==================
vector<int> v;
v.push_back()
v.pop_back()
v.back()
v.front()
v.clear()
v.erase(v.begin() + 3)
v.begin()
v.end()
v.assign(s.begin(), s.end())
v.resize(sizeWeWant);

std::unique(v.begin().v.end())
std::remove(v.begin(,v.end(),val)
std::find(v.begin(), v.end(), val)
std::fill(v.begin(), v.end(), val)
std::distance(v.begin(), v.end()) .  // calcualted number of elements between first and last. last iterator needn't be end()

---Assigning vector and emptying vector
 std::vector<int> foo (3,0);
 std::vector<int> bar (5,0);
  bar = foo;
  foo = std::vector<int>();

- Initializing vector:
	vector<bool> v(count, false);
	
- Initializing 2D vector:
	int m=3,n=5;
	vector<vector<int>> dp(m, vector<int>(n,0));
	
- Zeroing out a vector
	fill(v.begin(), v.end(), 0);

-Appending one vectot to another:
 	vecA.insert(vecA.end(),vecB.begin(),vecB.end());


- Custom soriting a vector : //Here a Point Struct is sorted based on its value using std::sort
	static bool sortElementsByValue(Point& left, Point& right){
		return (left.val<right.val) ? true: false;
	}
	sort(pointsA.begin(),pointsA.end(),sortElementsByValue);
	
	
- Erasing dupilicates and sorting a vector
	Method1: unique() call moves all duplicates to the end of the sorted vector.And then erase it
		sort( vec.begin(), vec.end() );
		vec.erase( unique( vec.begin(), vec.end() ), vec.end() );
	Method2:
		set<int> s( vec.begin(), vec.end() );
		vec.assign( s.begin(), s.end() );
	Method3:
		set<int> s;
		unsigned size = vec.size();
		for( unsigned i = 0; i < size; ++i ) s.insert( vec[i] );
		vec.assign( s.begin(), s.end() );
	
- Remove element by value
	remove(v.begin(), v.end(),ElemToRemove) - 
	This moves all "ElemToRemove" values to the very end of the vectot and returns the iterator to the very first of all           the removed  elements. Therefore, to erase all "ElemToRemove" , you'd do the following:
	
	v.erase(remove(v.begin(), v.end(),ElemToRemove), v.end());

- Sorting vector
	sort(v.begin(), v.end()); 
	OR
	bool sortByName(const Person &lhs, const Person &rhs) { return lhs.name < rhs.name; }
	sort(people.begin(), people.end(), sortByName);

- Vector of bools:
	To keep track of true or false for unknown number of elements.
	Bitset can only be used for fixed size known at compilation time
	

- Initialize a specific vector with increasing values
	iota(v.begin(),v.end(),100); // stores values as 100,101,102 upto length of array
	
	
- Converting a pair of integers into unique integer to be used in hashmap:

https://stackoverflow.com/questions/919612/mapping-two-integers-to-one-in-a-unique-and-deterministic-way



GRAPH/N-ARIES TREE
===================
Are nodes identified using index from 0 to N?
    YES => the node index (vertex) will match the vector index
          	vector<vector<int> > > graph;
                   OR
		vector<vector<pair<int, int> > > graph; //edges have weight
    NO => you have to create dedicated classes
		class Edge;
		class Vertex
		{
		 int id;
		 vector<Edge*> ptr_edges;
		}
		class Edge
		{
		 Vertex *from;
		 Vertex *to;
		 int cost;
		}
		class Graph
		{
 			vector<Vertex> vertices;
		}
		
		
		
